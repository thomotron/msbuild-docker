name: Build Container
on:
  workflow_dispatch:
    inputs:
      vs_version:
        type: string
        required: true
        default: '17'
jobs:
  install_buildtools:
    runs-on: windows-latest
    steps:    
      - name: Restore cached artifacts
        uses: actions/cache@v3
        id: cache-artifacts
        with:
          path: artifacts.7z
          key: artifacts-${{ github.event.inputs.vs_version }}
          
      - name: Prepare artifact directory
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          New-Item -ItemType Directory -Path artifacts -Force
        shell: pwsh

      - name: Install buildtools
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          # download buildtools installer
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_BuildTools.exe -OutFile vs_BuildTools.exe
          
          # set VS_VERSION env variable
          $env:VS_VERSION = ${{ github.event.inputs.vs_version }}
          
          # run buildtools installer
          cmd /S /C "start /w vs_BuildTools.exe --channelURI https://aka.ms/vs/%VS_VERSION%/release/channel --nocache --noUpdateInstaller --installPath %cd%\artifacts\vs_buildtools --addProductLang en-US --add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.Net.Component.SDK.4.7.2 --includeRecommended --wait --quiet"

      - name: Set up .NET SDK
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Copy .NET SDK and reference assemblies
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          Copy-Item -Path "C:\\Program Files\\dotnet" -Destination "artifacts\\dotnet" -Recurse -Force
          Copy-Item -Path "C:\\Program Files (x86)\\Reference Assemblies" -Destination "artifacts\\Reference Assemblies" -Recurse -Force
        shell: pwsh

      - name: Compress artifacts
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: artifacts
          pathTarget: artifacts.7z

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.4.0
        with:
          name: artifacts
          path: artifacts.7z
  
  build_container:
    needs: install_buildtools
    runs-on: ubuntu-20.04
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: artifacts
          path: artifacts.7z
        
      - name: Extract artifacts
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: artifacts.7z
          pathTarget: ./artifacts
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Build and push Docker image
        run: |
          VS_VERSION=${{ github.event.inputs.vs_version }}
          docker build -t ghcr.io/thomotron/msbuild-docker:${{ github.event.inputs.vs_version }}-latest .
          docker push ghcr.io/thomotron/msbuild-docker:${{ github.event.inputs.vs_version }}-latest
          if [ $VS_VERSION -eq 17 ]
          then
            docker tag ghcr.io/thomotron/msbuild-docker:${{ github.event.inputs.vs_version }}-latest ghcr.io/thomotron/msbuild-docker:latest
            docker push ghcr.io/thomotron/msbuild-docker:latest
          fi
